"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var gsap_1 = require("gsap");
var debounce_1 = tslib_1.__importDefault(require("lodash/debounce"));
var find_1 = tslib_1.__importDefault(require("lodash/find"));
var three_1 = require("three");
var resize_observer_polyfill_1 = tslib_1.__importDefault(require("resize-observer-polyfill"));
var shaders_1 = require("./shaders");
var textureWrapper_1 = require("./textureWrapper");
var intrinsic_scale_1 = require("intrinsic-scale");
require("./createImageBitmapPolyfill");
var imageWrapper_1 = require("./imageWrapper");
var DistortionEffectCarouselPlugin = /** @class */ (function () {
    function DistortionEffectCarouselPlugin(_a) {
        var _this = this;
        var _b = _a.intensity, intensity = _b === void 0 ? 1 : _b, _c = _a.commonAngle, commonAngle = _c === void 0 ? Math.PI / 4 : _c, angle1 = _a.angle1, angle2 = _a.angle2, _d = _a.speed, speed = _d === void 0 ? 1.6 : _d, _e = _a.easing, easing = _e === void 0 ? 'easeOut' : _e, parent = _a.parent, _f = _a.initialIndex, initialIndex = _f === void 0 ? 0 : _f, images = _a.images, displacmentImage = _a.displacmentImage, _g = _a.backgroundSize, backgroundSize = _g === void 0 ? 'cover' : _g, _h = _a.displacmentBackgroundSize, displacmentBackgroundSize = _h === void 0 ? 'cover' : _h, _j = _a.resizeDebounce, resizeDebounce = _j === void 0 ? 250 : _j, onImageLoaded = _a.onImageLoaded, _k = _a.dpr, dpr = _k === void 0 ? (typeof window !== 'undefined' && window.devicePixelRatio) || 1 : _k;
        this.isDisposed = false;
        this.showFirstImage = true;
        this.currentIndex = 0;
        this.render = function () {
            _this.renderer.render(_this.scene, _this.camera);
        };
        this.onResize = function () {
            // onResize is an async callback, check if disposed
            if (_this.isDisposed) {
                return;
            }
            var newWidth = _this.parent.offsetWidth;
            var newHeight = _this.parent.offsetHeight;
            if (_this.width === newWidth && _this.height === newHeight) {
                return;
            }
            _this.width = newWidth;
            _this.height = newHeight;
            var uniforms = _this.mat.uniforms;
            // draw all images with new size
            _this.drawImage(_this.displacmentImage);
            _this.images.forEach(function (image) {
                _this.drawImage(image);
            });
            _this.textures.forEach(function (_a) {
                var texture = _a.texture;
                if (texture.image) {
                    texture.needsUpdate = true;
                }
            });
            uniforms.res.value = _this.createVector();
            _this.renderer.setSize(_this.width, _this.height);
            _this.render();
        };
        this.dpr = dpr;
        this.onImageLoaded = onImageLoaded;
        this.backgroundSize = backgroundSize;
        this.displacmentBackgroundSize = displacmentBackgroundSize;
        this.loader = new three_1.ImageBitmapLoader();
        this.displacmentImage = new imageWrapper_1.ImageWrapper({
            isDisplacement: true,
        });
        this.images = images.map(function (_, index) { return new imageWrapper_1.ImageWrapper({ isDisplacement: false, index: index }); });
        this.loader.crossOrigin = '';
        this.angle1 = typeof angle1 === 'number' ? angle1 : commonAngle;
        this.angle2 = typeof angle2 === 'number' ? angle2 : -commonAngle * 3;
        this.speed = speed;
        this.easing = gsap_1.Expo[easing];
        this.parent = parent;
        this.width = parent.offsetWidth;
        this.height = parent.offsetHeight;
        this.currentIndex = initialIndex;
        if (!this.checkIfIndexValid(this.currentIndex)) {
            console.warn('initial index out of boundaries');
            this.currentIndex = 0;
        }
        this.texture1 = new textureWrapper_1.TextureWrapper({
            isDisplacement: false,
            index: this.currentIndex,
        });
        this.texture2 = new textureWrapper_1.TextureWrapper({
            isDisplacement: false,
        });
        this.disp = new textureWrapper_1.TextureWrapper({
            isDisplacement: true,
        });
        this.textures = [this.texture1, this.texture2, this.disp];
        this.mat = new three_1.ShaderMaterial({
            uniforms: {
                intensity: {
                    type: 'f',
                    value: intensity,
                },
                dispFactor: {
                    type: 'f',
                    value: 0.0,
                },
                angle1: {
                    type: 'f',
                },
                angle2: {
                    type: 'f',
                },
                texture1: {
                    type: 't',
                    value: this.texture1.texture,
                },
                texture2: {
                    type: 't',
                    value: this.texture2.texture,
                },
                disp: {
                    type: 't',
                    value: this.disp.texture,
                },
                res: {
                    type: 'vec4',
                    value: this.createVector(),
                },
            },
            vertexShader: shaders_1.vertex,
            fragmentShader: shaders_1.fragment,
            transparent: true,
            opacity: 1,
        });
        this.geometry = new three_1.PlaneBufferGeometry(this.width, this.height, 1);
        var mesh = new three_1.Mesh(this.geometry, this.mat);
        this.scene = new three_1.Scene();
        this.scene.add(mesh);
        this.camera = new three_1.OrthographicCamera(this.width / -2, this.width / 2, this.height / 2, this.height / -2, 1, 1000);
        this.camera.position.z = 1;
        this.renderer = new three_1.WebGLRenderer({
            alpha: true,
        });
        this.renderer.setPixelRatio(this.dpr);
        this.renderer.setClearColor(0xffffff, 0.0);
        this.renderer.setSize(this.width, this.height);
        this.renderer.compile(this.scene, this.camera);
        this.parent.appendChild(this.renderer.domElement);
        this.onResize = debounce_1.default(this.onResize, resizeDebounce);
        this.resizeObserver = new resize_observer_polyfill_1.default(this.onResize);
        this.resizeObserver.observe(this.parent);
        this.loadImage(displacmentImage, this.displacmentImage);
        images.forEach(function (src, index) {
            _this.loadImage(src, _this.images[index]);
        });
    }
    DistortionEffectCarouselPlugin.prototype.loadImage = function (src, imageWrapper) {
        var _this = this;
        var isDisplacement = imageWrapper.isDisplacement, index = imageWrapper.index;
        this.loader.load(src, function (image) {
            // async callback, check if disposed
            if (_this.isDisposed) {
                return;
            }
            imageWrapper.image = image;
            _this.drawImage(imageWrapper);
            var textureWrapper = find_1.default(_this.textures, { isDisplacement: isDisplacement, index: index });
            if (textureWrapper) {
                _this.attachImage(textureWrapper);
                if (!isDisplacement && index === _this.currentIndex) {
                    // render only if this is the current image
                    _this.render();
                }
            }
            if (!isDisplacement && _this.onImageLoaded) {
                _this.onImageLoaded(index);
            }
        }, function () { return undefined; }, function () {
            console.warn('faild to load image');
            // TODO: handle error
            if (!isDisplacement && _this.onImageLoaded) {
                _this.onImageLoaded(index);
            }
        });
    };
    DistortionEffectCarouselPlugin.prototype.createVector = function () {
        return new three_1.Vector4(this.width * (this.dpr / 2), this.height * (this.dpr / 2), 1, 1);
    };
    DistortionEffectCarouselPlugin.prototype.drawImage = function (_a) {
        var canvas = _a.canvas, image = _a.image, isDisplacement = _a.isDisplacement;
        if (!image) {
            // image not loaded yet
            return;
        }
        canvas.width = this.width * this.dpr;
        canvas.height = this.height * this.dpr;
        var context = canvas.getContext('2d');
        if (!context) {
            console.warn('canvas context is not defined');
            return;
        }
        context.clearRect(0, 0, canvas.width, canvas.height);
        var backgroundSize = isDisplacement
            ? this.displacmentBackgroundSize
            : this.backgroundSize;
        switch (backgroundSize) {
            case 'repeat': {
                var pattern = context.createPattern(image, 'repeat');
                context.fillStyle = pattern;
                context.fillRect(0, 0, canvas.width, canvas.height);
                break;
            }
            case 'stretch': {
                context.drawImage(image, 0, 0, canvas.width, canvas.height);
                break;
            }
            default: {
                var scaleFunction = backgroundSize === 'cover' ? intrinsic_scale_1.cover : intrinsic_scale_1.contain;
                var _b = scaleFunction(this.width, this.height, image.width, image.height), height = _b.height, width = _b.width, x = _b.x, y = _b.y;
                context.drawImage(image, x * this.dpr, y * this.dpr, width * this.dpr, height * this.dpr);
            }
        }
    };
    DistortionEffectCarouselPlugin.prototype.attachImage = function (textureWrapper) {
        var texture = textureWrapper.texture, index = textureWrapper.index, isDisplacement = textureWrapper.isDisplacement;
        var canvas = (isDisplacement
            ? this.displacmentImage
            : this.images[index]).canvas;
        texture.image = canvas;
        texture.needsUpdate = true;
    };
    DistortionEffectCarouselPlugin.prototype.checkIfIndexValid = function (index) {
        return index >= 0 && index <= this.images.length - 1;
    };
    DistortionEffectCarouselPlugin.prototype.calculatePrevIndex = function (index) {
        var newIndex = index - 1;
        if (!this.checkIfIndexValid(newIndex)) {
            newIndex = this.images.length - 1;
        }
        return newIndex;
    };
    DistortionEffectCarouselPlugin.prototype.calculateNextIndex = function (index) {
        var newIndex = index + 1;
        if (!this.checkIfIndexValid(newIndex)) {
            newIndex = 0;
        }
        return newIndex;
    };
    DistortionEffectCarouselPlugin.prototype.slide = function (index, isNext) {
        var _a;
        this.currentIndex = index;
        var uniforms = this.mat.uniforms;
        this.showFirstImage = !this.showFirstImage;
        var newTextureWrapper = this.showFirstImage
            ? this.texture1
            : this.texture2;
        newTextureWrapper.index = this.currentIndex;
        if ((this.showFirstImage && isNext) || (!this.showFirstImage && !isNext)) {
            uniforms.angle1.value = this.angle1;
            uniforms.angle2.value = this.angle2;
        }
        else {
            uniforms.angle1.value = this.angle2;
            uniforms.angle2.value = this.angle1;
        }
        this.attachImage(newTextureWrapper);
        (_a = this.tween) === null || _a === void 0 ? void 0 : _a.kill();
        this.tween = gsap_1.TweenMax.to(uniforms.dispFactor, this.speed, {
            value: this.showFirstImage ? 0 : 1,
            ease: this.easing,
            onUpdate: this.render,
            onComplete: this.render,
        });
    };
    DistortionEffectCarouselPlugin.prototype.next = function () {
        var newIndex = this.calculateNextIndex(this.currentIndex);
        this.slide(newIndex, true);
    };
    DistortionEffectCarouselPlugin.prototype.prev = function () {
        var newIndex = this.calculatePrevIndex(this.currentIndex);
        this.slide(newIndex, false);
    };
    DistortionEffectCarouselPlugin.prototype.jump = function (index) {
        if (!this.checkIfIndexValid(index)) {
            console.warn('index out of boundaries');
            return;
        }
        if (index === this.currentIndex) {
            return;
        }
        var isNext = index > this.currentIndex;
        this.slide(index, isNext);
    };
    DistortionEffectCarouselPlugin.prototype.getCurrentIndex = function () {
        return this.currentIndex;
    };
    DistortionEffectCarouselPlugin.prototype.dispose = function () {
        var _a;
        (_a = this.tween) === null || _a === void 0 ? void 0 : _a.kill();
        this.textures.forEach(function (_a) {
            var texture = _a.texture;
            texture.dispose();
        });
        this.parent.removeChild(this.renderer.domElement);
        this.renderer.dispose();
        this.scene.dispose();
        this.geometry.dispose();
        this.resizeObserver.disconnect();
        this.isDisposed = true;
    };
    return DistortionEffectCarouselPlugin;
}());
exports.DistortionEffectCarouselPlugin = DistortionEffectCarouselPlugin;
