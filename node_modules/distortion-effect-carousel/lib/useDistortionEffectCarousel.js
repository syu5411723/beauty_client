"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = require("react");
var react_use_1 = require("react-use");
var distortionEffectCarouselPlugin_1 = require("./distortionEffectCarouselPlugin");
function useDistortionEffectCarousel(_a) {
    var ref = _a.ref, images = _a.images, displacmentImage = _a.displacmentImage, _b = _a.initialIndex, initialIndex = _b === void 0 ? 0 : _b, backgroundSize = _a.backgroundSize, displacmentBackgroundSize = _a.displacmentBackgroundSize, commonAngle = _a.commonAngle, easing = _a.easing, intensity = _a.intensity, resizeDebounce = _a.resizeDebounce, speed = _a.speed, angle1 = _a.angle1, angle2 = _a.angle2, dpr = _a.dpr;
    var _c = react_1.useState(initialIndex), currentIndex = _c[0], setCurrentIndex = _c[1];
    // loadedImages[0] === true, indicates that the first image is loaded
    var _d = react_1.useState({}), loadedImages = _d[0], setLoadedImages = _d[1];
    var pluginRef = react_1.useRef(null);
    var defaultRef = react_1.useRef(null);
    var actualRef = ref || defaultRef;
    // deep compare becuase the images could pass as a new array every render
    react_use_1.useDeepCompareEffect(function () {
        // in this time, the ref should be populated
        if (!actualRef.current) {
            console.warn('ref is missing');
            return;
        }
        if (images.length === 0) {
            return;
        }
        var onImageLoaded = function (index) {
            setLoadedImages(function (prev) {
                var _a;
                return (tslib_1.__assign(tslib_1.__assign({}, prev), (_a = {}, _a[index] = true, _a)));
            });
        };
        var plugin = new distortionEffectCarouselPlugin_1.DistortionEffectCarouselPlugin({
            initialIndex: initialIndex,
            images: images,
            displacmentImage: displacmentImage,
            parent: actualRef.current,
            backgroundSize: backgroundSize,
            displacmentBackgroundSize: displacmentBackgroundSize,
            commonAngle: commonAngle,
            easing: easing,
            intensity: intensity,
            resizeDebounce: resizeDebounce,
            speed: speed,
            onImageLoaded: onImageLoaded,
            angle1: angle1,
            angle2: angle2,
            dpr: dpr,
        });
        pluginRef.current = plugin;
        // this is necessary if the plugin was created before or the initialIndex is not valid
        setCurrentIndex(plugin.getCurrentIndex());
        // this is necessary if the plugin was created before
        setLoadedImages({});
        return function () {
            plugin.dispose();
            pluginRef.current = null;
        };
    }, [
        actualRef,
        displacmentImage,
        images,
        initialIndex,
        backgroundSize,
        displacmentBackgroundSize,
        commonAngle,
        easing,
        intensity,
        resizeDebounce,
        speed,
        angle1,
        angle2,
        dpr,
    ]);
    var next = react_1.useCallback(function () {
        var plugin = pluginRef.current;
        if (!plugin) {
            return;
        }
        plugin.next();
        setCurrentIndex(plugin.getCurrentIndex());
    }, []);
    var prev = react_1.useCallback(function () {
        var plugin = pluginRef.current;
        if (!plugin) {
            return;
        }
        plugin.prev();
        setCurrentIndex(plugin.getCurrentIndex());
    }, []);
    var jump = react_1.useCallback(function (index) {
        var plugin = pluginRef.current;
        if (!plugin) {
            return;
        }
        plugin.jump(index);
        setCurrentIndex(plugin.getCurrentIndex());
    }, []);
    return react_1.useMemo(function () { return ({
        currentIndex: currentIndex,
        next: next,
        prev: prev,
        jump: jump,
        ref: actualRef,
        loadedImages: loadedImages,
    }); }, [actualRef, currentIndex, jump, loadedImages, next, prev]);
}
exports.useDistortionEffectCarousel = useDistortionEffectCarousel;
