import { Expo } from 'gsap';
import './createImageBitmapPolyfill';
export declare type BackgroundSize = 'cover' | 'contain' | 'repeat' | 'stretch';
export declare type Easing = keyof typeof Expo;
export declare type onImageLoaded = (index: number) => void;
export interface DistortionEffectCarouselPluginOptions {
    intensity?: number;
    commonAngle?: number;
    angle1?: number;
    angle2?: number;
    speed?: number;
    easing?: Easing;
    parent: HTMLElement;
    initialIndex?: number;
    backgroundSize?: BackgroundSize;
    displacmentBackgroundSize?: BackgroundSize;
    images: string[];
    displacmentImage: string;
    resizeDebounce?: number;
    onImageLoaded?: onImageLoaded;
    dpr?: number;
}
export declare class DistortionEffectCarouselPlugin {
    private readonly backgroundSize;
    private readonly displacmentBackgroundSize;
    private readonly images;
    private displacmentImage;
    private readonly loader;
    private readonly speed;
    private readonly easing;
    private readonly parent;
    private readonly scene;
    private readonly camera;
    private readonly renderer;
    private readonly mat;
    private readonly geometry;
    private readonly texture1;
    private readonly texture2;
    private readonly disp;
    private readonly textures;
    private readonly resizeObserver;
    private readonly angle1;
    private readonly angle2;
    private readonly dpr;
    private readonly onImageLoaded?;
    private isDisposed;
    private showFirstImage;
    private currentIndex;
    private tween?;
    private width;
    private height;
    constructor({ intensity, commonAngle, angle1, angle2, speed, easing, parent, initialIndex, images, displacmentImage, backgroundSize, displacmentBackgroundSize, resizeDebounce, onImageLoaded, dpr, }: DistortionEffectCarouselPluginOptions);
    private loadImage;
    private render;
    private createVector;
    private drawImage;
    private attachImage;
    private checkIfIndexValid;
    private calculatePrevIndex;
    private calculateNextIndex;
    private onResize;
    private slide;
    next(): void;
    prev(): void;
    jump(index: number): void;
    getCurrentIndex(): number;
    dispose(): void;
}
